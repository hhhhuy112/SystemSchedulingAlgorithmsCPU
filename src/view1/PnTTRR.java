/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view1;

import bean.Proc;
import controller.ControllerRR;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import library.LibraryDimension;

/**
 *
 * @author MinhHuyHo
 */
public class PnTTRR extends javax.swing.JPanel implements ActionListener {

    private DefaultTableModel modelTT, modelKQ;
    private int crow;
    private int rowCount = 0;
    private controller.ControllerRR controller;
    private ArrayList<Proc> listItemTT;
    private ArrayList<Proc> listItemKQ;
    private int ktModel = 0;
    private Vector v;

    public PnTTRR() {
        initComponents();
        v = new Vector();
        crow = -1;
        rowCount = tbRRKQ.getSelectedRowCount();
        controller = new ControllerRR(taKQ,tfSumTime,tfAverage);
        listItemTT = new ArrayList<Proc>();
        listItemKQ = new ArrayList<Proc>();
        //set split pane
        JSplitPane sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, pnCatLeft, pnCatRight);
        sp.setOneTouchExpandable(true);
        add(sp);
        pnCatLeft.setMinimumSize(new Dimension(LibraryDimension.PANEL_LEFT_WIDTH, pnCatLeft.getSize().height));
        modelTT = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Integer.class;
                }
                return Double.class;

            }

        };
        modelKQ = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Integer.class;
                }
                return Double.class;
            }

        };

        loadTable(listItemTT, 0, modelTT, tbRRTT);
        loadTable(listItemKQ, 1, modelKQ, tbRRKQ);

        //
        btRRThem.addActionListener(this);
        btRRSua.addActionListener(this);
        btRRXoa.addActionListener(this);
        btRRNhapLai.addActionListener(this);
        btRRKQ.addActionListener(this);

        ((JComponent) tbRRKQ.getDefaultRenderer(Boolean.class)).setOpaque(true);
        ((JComponent) tbRRTT.getDefaultRenderer(Boolean.class)).setOpaque(true);

    }

    public void loadTable(ArrayList<Proc> listItem, int ckModel, DefaultTableModel model, JTable tb) {
        controller.loadTable(tb, model, listItem, ckModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnCatLeft = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btRRThem = new javax.swing.JButton();
        btRRSua = new javax.swing.JButton();
        btRRNhapLai = new javax.swing.JButton();
        btRRXoa = new javax.swing.JButton();
        tfRRId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfRRTimeRun = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbRRTT = new javax.swing.JTable();
        btRRKQ = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tfRRQuantum = new javax.swing.JTextField();
        pnCatRight = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbRRKQ = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfSumTime = new javax.swing.JTextField();
        tfAverage = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        taKQ = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        pnCatLeft.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Form chức năng", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 102, 0))); // NOI18N
        pnCatLeft.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("ID:");

        btRRThem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btRRThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add-icon.gif"))); // NOI18N
        btRRThem.setText("Thêm");
        jPanel3.add(btRRThem);

        btRRSua.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btRRSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit-icon.gif"))); // NOI18N
        btRRSua.setText("Sửa");
        btRRSua.setPreferredSize(new java.awt.Dimension(85, 25));
        jPanel3.add(btRRSua);

        btRRNhapLai.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btRRNhapLai.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.gif"))); // NOI18N
        btRRNhapLai.setText("Nhập lại");
        btRRNhapLai.setPreferredSize(new java.awt.Dimension(95, 25));
        btRRNhapLai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRRNhapLaiActionPerformed(evt);
            }
        });
        jPanel3.add(btRRNhapLai);

        btRRXoa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btRRXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/del.gif"))); // NOI18N
        btRRXoa.setText("Xóa");
        btRRXoa.setPreferredSize(new java.awt.Dimension(85, 25));
        jPanel3.add(btRRXoa);

        tfRRId.setEnabled(false);
        tfRRId.setPreferredSize(new java.awt.Dimension(6, 32));
        tfRRId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfRRIdActionPerformed(evt);
            }
        });

        jLabel5.setText("Thời gian thực hiện:");

        tfRRTimeRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfRRTimeRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfRRTimeRun, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfRRId, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfRRId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfRRTimeRun, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 205, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        pnCatLeft.add(jPanel1, java.awt.BorderLayout.CENTER);

        tbRRTT.setAutoCreateRowSorter(true);
        tbRRTT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tbRRTT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbRRTTMousePressed(evt);
            }
        });
        tbRRTT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbRRTTKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tbRRTT);

        btRRKQ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/msg-ok.gif"))); // NOI18N
        btRRKQ.setText("Kết quả");
        btRRKQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRRKQActionPerformed(evt);
            }
        });

        jLabel4.setText("Quantum :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 3, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(tfRRQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btRRKQ)
                        .addGap(27, 27, 27))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btRRKQ)
                    .addComponent(jLabel4)
                    .addComponent(tfRRQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnCatLeft.add(jPanel2, java.awt.BorderLayout.SOUTH);

        add(pnCatLeft, java.awt.BorderLayout.LINE_START);

        pnCatRight.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Kết quả", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 102, 0))); // NOI18N

        tbRRKQ.setAutoCreateRowSorter(true);
        tbRRKQ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tbRRKQ.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbRRKQ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbRRKQMousePressed(evt);
            }
        });
        tbRRKQ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbRRKQKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbRRKQ);
        if (tbRRKQ.getColumnModel().getColumnCount() > 0) {
            tbRRKQ.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel2.setText("Tổng thời gian chờ:");

        jLabel3.setText("Thời gian chờ trung bình:");

        tfSumTime.setEnabled(false);
        tfSumTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSumTimeActionPerformed(evt);
            }
        });

        tfAverage.setEnabled(false);
        tfAverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAverageActionPerformed(evt);
            }
        });

        taKQ.setColumns(20);
        taKQ.setRows(5);
        jScrollPane2.setViewportView(taKQ);

        javax.swing.GroupLayout pnCatRightLayout = new javax.swing.GroupLayout(pnCatRight);
        pnCatRight.setLayout(pnCatRightLayout);
        pnCatRightLayout.setHorizontalGroup(
            pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCatRightLayout.createSequentialGroup()
                .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSumTime, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnCatRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pnCatRightLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tfAverage, tfSumTime});

        pnCatRightLayout.setVerticalGroup(
            pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCatRightLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSumTime, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(19, 19, 19))
        );

        pnCatRightLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {tfAverage, tfSumTime});

        add(pnCatRight, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tbRRKQKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbRRKQKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tbRRKQKeyReleased

    private void tbRRKQMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRRKQMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbRRKQMousePressed

    private void btRRNhapLaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRRNhapLaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btRRNhapLaiActionPerformed

    private void tfRRIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfRRIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfRRIdActionPerformed

    private void btRRKQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRRKQActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btRRKQActionPerformed

    private void tbRRTTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbRRTTKeyReleased
        // TODO add your handling code here:
        setForm();
    }//GEN-LAST:event_tbRRTTKeyReleased

    private void tbRRTTMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRRTTMousePressed
        // TODO add your handling code here:
        setForm();
    }//GEN-LAST:event_tbRRTTMousePressed

    private void tfSumTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSumTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSumTimeActionPerformed

    private void tfAverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAverageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfAverageActionPerformed

    private void tfRRTimeRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfRRTimeRunActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfRRTimeRunActionPerformed
    public void setForm() {
        crow = tbRRTT.getSelectedRow();
        tfRRId.setText(String.valueOf(tbRRTT.getValueAt(crow, 0)));
        tfRRTimeRun.setText(String.valueOf(tbRRTT.getValueAt(crow, 1)));
    }

    public void resetForm() {
        tfRRId.setText("");
        tfRRTimeRun.setText("");
        tbRRTT.clearSelection();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btRRKQ;
    private javax.swing.JButton btRRNhapLai;
    private javax.swing.JButton btRRSua;
    private javax.swing.JButton btRRThem;
    private javax.swing.JButton btRRXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnCatLeft;
    private javax.swing.JPanel pnCatRight;
    private javax.swing.JTextArea taKQ;
    private javax.swing.JTable tbRRKQ;
    private javax.swing.JTable tbRRTT;
    private javax.swing.JTextField tfAverage;
    private javax.swing.JTextField tfRRId;
    private javax.swing.JTextField tfRRQuantum;
    private javax.swing.JTextField tfRRTimeRun;
    private javax.swing.JTextField tfSumTime;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btRRThem) {

            if ("".equals(tfRRTimeRun.getText())) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập vào thời gian thực hiện");

            } else if(ckNumber(tfRRTimeRun.getText())==1) {

                ArrayList<Proc> alProc = controller.getListTableTT(tbRRTT);
                Proc sjf = new Proc(alProc.size() + 1, Double.parseDouble(tfRRTimeRun.getText()));
                alProc.add(sjf);
                loadTable(alProc, 0, modelTT, tbRRTT);
                resetForm();
            }

        }
        if (e.getSource() == btRRSua) {
            if ("".equals(tfRRTimeRun.getText()) && "".equals(tfRRId.getText())) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập vào thời gian thực hiện");

            } else {
                crow = tbRRTT.getSelectedRow();
                if (crow < 0) {
                    JOptionPane.showMessageDialog(this, "Vui lòng chọn để sửa");
                    return;
                } else {

                    Proc proc = new Proc(Integer.parseInt(tfRRId.getText()), Double.parseDouble(tfRRTimeRun.getText()));
                    ArrayList<Proc> alProc = controller.editRRTT(proc, tbRRTT);
                    loadTable(alProc, 0, modelTT, tbRRTT);
                    tbRRTT.setRowSelectionInterval(crow, crow);
                    resetForm();
                }
            }
        }
        if (e.getSource() == btRRNhapLai) {
            resetForm();
        }
        if (e.getSource() == btRRXoa) {
            if ("".equals(tfRRTimeRun.getText()) && "".equals(tfRRId.getText())) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập vào thời gian thực hiện");

            } else {
                crow = tbRRTT.getSelectedRow();
                if (crow < 0) {
                    JOptionPane.showMessageDialog(this, "Vui lòng chọn để sửa");
                    return;
                } else {

                    Proc proc = new Proc(Integer.parseInt(tfRRId.getText()), Double.parseDouble(tfRRTimeRun.getText()));
                    ArrayList<Proc> alProc = controller.deleteRRTT(proc, tbRRTT);
                    loadTable(alProc, 0, modelTT, tbRRTT);
                    tbRRTT.setRowSelectionInterval(crow, crow);
                    resetForm();
                }
            }
        }
        if (e.getSource() == btRRKQ) {
            int countRows = tbRRTT.getRowCount();
            if (countRows <= 0) {
                JOptionPane.showMessageDialog(this, "Chưa có tiến trình nào");
            } else {
                try {
                    int quantum = Integer.parseInt(tfRRQuantum.getText());
                    ArrayList<Proc> alProc = controller.ketQua(tbRRTT, quantum);
                    loadTable(alProc, 1, modelKQ, tbRRKQ);
                    tinhSumAndAverageTimeWait(alProc);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập vào quantum là số ");
                }

            }
        }

    }

    public void tinhSumAndAverageTimeWait(ArrayList<Proc> alProc) {
        double sum = 0;

        for (Proc proc : alProc) {
            sum += proc.getTimeWaiting();
        }
        tfSumTime.setText(String.valueOf(sum));
        tfAverage.setText(String.valueOf((double) sum / alProc.size()));

    }
    public int ckNumber(String num) {
        int ck = 1;
        try {
            Double.parseDouble(num);
        } catch (NumberFormatException ex) {
            ck = 0;
            JOptionPane.showMessageDialog(this, "Vui lòng nhập vào số");

        }
        return ck;
    }

}
