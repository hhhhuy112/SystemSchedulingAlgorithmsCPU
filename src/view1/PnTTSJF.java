/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view1;

import bean.Proc;
import bean.ProcSJF;
import controller.ControllerFCFS;
import controller.ControllerSJF;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import library.LibraryDimension;

/**
 *
 * @author MinhHuyHo
 */
public class PnTTSJF extends javax.swing.JPanel implements ActionListener {

    private DefaultTableModel modelTT, modelKQ;
    private int crow;
    private int rowCount = 0;
    private controller.ControllerSJF controller;
    private ArrayList<ProcSJF> listItemTT;
    private ArrayList<ProcSJF> listItemKQ;
    private int ktModel = 0;
    private Vector v;
    private int kieuTT = 0;
    
    public PnTTSJF() {
        initComponents();
        v = new Vector();

        crow = -1;
        rowCount = tbSJFKQ.getSelectedRowCount();
        controller = new ControllerSJF(taTT,tfSumTime,tfAverage);
        listItemTT = new ArrayList<ProcSJF>();
        listItemKQ = new ArrayList<ProcSJF>();
        //set split pane
        JSplitPane sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, pnCatLeft, pnCatRight);
        sp.setOneTouchExpandable(true);
        add(sp);
        pnCatLeft.setMinimumSize(new Dimension(LibraryDimension.PANEL_LEFT_WIDTH, pnCatLeft.getSize().height));
        modelTT = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Integer.class;
                }
                return Double.class;

            }

        };
        modelKQ = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Integer.class;
                }
                return Double.class;
            }

        };

        loadTable(listItemTT, 0, modelTT, tbSJFTT);
        loadTable(listItemKQ, 1, modelKQ, tbSJFKQ);

        //
        btSJFThem.addActionListener(this);
        btSJFSua.addActionListener(this);
        btSJFXoa.addActionListener(this);
        btSJFNhapLai.addActionListener(this);
        btSJFKQ.addActionListener(this);

        ((JComponent) tbSJFKQ.getDefaultRenderer(Boolean.class)).setOpaque(true);
        ((JComponent) tbSJFTT.getDefaultRenderer(Boolean.class)).setOpaque(true);

    }

    public void loadTable(ArrayList<ProcSJF> listItem, int ckModel, DefaultTableModel model, JTable tb) {
        controller.loadTable(tb, model, listItem, ckModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnCatLeft = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btSJFThem = new javax.swing.JButton();
        btSJFSua = new javax.swing.JButton();
        btSJFNhapLai = new javax.swing.JButton();
        btSJFXoa = new javax.swing.JButton();
        tfSJFId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfSJFTimeRun = new javax.swing.JTextField();
        cbKieuTT = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        tfSJFArrivalTime = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbSJFTT = new javax.swing.JTable();
        btSJFKQ = new javax.swing.JButton();
        pnCatRight = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSJFKQ = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfSumTime = new javax.swing.JTextField();
        tfAverage = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        taTT = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        pnCatLeft.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Form chức năng", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 102, 0))); // NOI18N
        pnCatLeft.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("ID:");

        btSJFThem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btSJFThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add-icon.gif"))); // NOI18N
        btSJFThem.setText("Thêm");
        jPanel3.add(btSJFThem);

        btSJFSua.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btSJFSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit-icon.gif"))); // NOI18N
        btSJFSua.setText("Sửa");
        btSJFSua.setPreferredSize(new java.awt.Dimension(85, 25));
        jPanel3.add(btSJFSua);

        btSJFNhapLai.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btSJFNhapLai.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.gif"))); // NOI18N
        btSJFNhapLai.setText("Nhập lại");
        btSJFNhapLai.setPreferredSize(new java.awt.Dimension(95, 25));
        btSJFNhapLai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSJFNhapLaiActionPerformed(evt);
            }
        });
        jPanel3.add(btSJFNhapLai);

        btSJFXoa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btSJFXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/del.gif"))); // NOI18N
        btSJFXoa.setText("Xóa");
        btSJFXoa.setPreferredSize(new java.awt.Dimension(85, 25));
        jPanel3.add(btSJFXoa);

        tfSJFId.setEnabled(false);
        tfSJFId.setPreferredSize(new java.awt.Dimension(6, 32));
        tfSJFId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSJFIdActionPerformed(evt);
            }
        });

        jLabel5.setText("Thời gian thực hiện:");

        tfSJFTimeRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSJFTimeRunActionPerformed(evt);
            }
        });

        cbKieuTT.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SJF", "SRT" }));
        cbKieuTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbKieuTTActionPerformed(evt);
            }
        });

        jLabel6.setText("Kiểu thuật toán :");

        tfSJFArrivalTime.setEnabled(false);
        tfSJFArrivalTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSJFArrivalTimeActionPerformed(evt);
            }
        });

        jLabel7.setText("Thời gian đến         :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbKieuTT, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSJFTimeRun, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSJFId, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSJFArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(173, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfSJFId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfSJFTimeRun, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSJFArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbKieuTT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        pnCatLeft.add(jPanel1, java.awt.BorderLayout.CENTER);

        tbSJFTT.setAutoCreateRowSorter(true);
        tbSJFTT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tbSJFTT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbSJFTTMousePressed(evt);
            }
        });
        tbSJFTT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbSJFTTKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tbSJFTT);

        btSJFKQ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/msg-ok.gif"))); // NOI18N
        btSJFKQ.setText("Kết quả");
        btSJFKQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSJFKQActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btSJFKQ)
                        .addGap(195, 195, 195))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSJFKQ))
        );

        pnCatLeft.add(jPanel2, java.awt.BorderLayout.SOUTH);

        add(pnCatLeft, java.awt.BorderLayout.LINE_START);

        pnCatRight.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Kết quả", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 102, 0))); // NOI18N

        tbSJFKQ.setAutoCreateRowSorter(true);
        tbSJFKQ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tbSJFKQ.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbSJFKQ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbSJFKQMousePressed(evt);
            }
        });
        tbSJFKQ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbSJFKQKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbSJFKQ);
        if (tbSJFKQ.getColumnModel().getColumnCount() > 0) {
            tbSJFKQ.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel2.setText("Tổng thời gian chờ:");

        jLabel3.setText("Thời gian chờ trung bình:");

        tfSumTime.setEnabled(false);
        tfSumTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSumTimeActionPerformed(evt);
            }
        });

        tfAverage.setEnabled(false);
        tfAverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAverageActionPerformed(evt);
            }
        });

        taTT.setColumns(20);
        taTT.setRows(5);
        jScrollPane2.setViewportView(taTT);

        javax.swing.GroupLayout pnCatRightLayout = new javax.swing.GroupLayout(pnCatRight);
        pnCatRight.setLayout(pnCatRightLayout);
        pnCatRightLayout.setHorizontalGroup(
            pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCatRightLayout.createSequentialGroup()
                .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnCatRightLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(pnCatRightLayout.createSequentialGroup()
                        .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSumTime, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane2)
        );

        pnCatRightLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tfAverage, tfSumTime});

        pnCatRightLayout.setVerticalGroup(
            pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCatRightLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSumTime, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnCatRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(19, 19, 19))
        );

        pnCatRightLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {tfAverage, tfSumTime});

        add(pnCatRight, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tbSJFKQKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbSJFKQKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tbSJFKQKeyReleased

    private void tbSJFKQMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSJFKQMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbSJFKQMousePressed

    private void btSJFNhapLaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSJFNhapLaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btSJFNhapLaiActionPerformed

    private void tfSJFIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSJFIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSJFIdActionPerformed

    private void btSJFKQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSJFKQActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btSJFKQActionPerformed

    private void tbSJFTTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbSJFTTKeyReleased
        // TODO add your handling code here:
        setForm();
    }//GEN-LAST:event_tbSJFTTKeyReleased

    private void tbSJFTTMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSJFTTMousePressed
        // TODO add your handling code here:
        setForm();
    }//GEN-LAST:event_tbSJFTTMousePressed

    private void tfSumTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSumTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSumTimeActionPerformed

    private void tfAverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAverageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfAverageActionPerformed

    private void tfSJFTimeRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSJFTimeRunActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSJFTimeRunActionPerformed

    private void cbKieuTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbKieuTTActionPerformed
        // TODO add your handling code here:
        if (cbKieuTT.getSelectedItem().equals("SJF")) {
            loadTable(listItemTT, 0, modelTT, tbSJFTT);
            listItemTT = new ArrayList<ProcSJF>();
            listItemKQ = new ArrayList<ProcSJF>();
            kieuTT = 0;
            tfSJFArrivalTime.setEnabled(false);
        } else {
            loadTable(listItemTT, 2, modelTT, tbSJFTT);
            listItemTT = new ArrayList<ProcSJF>();
            listItemKQ = new ArrayList<ProcSJF>();
            kieuTT = 1;
            tfSJFArrivalTime.setEnabled(true);
        }
    }//GEN-LAST:event_cbKieuTTActionPerformed

    private void tfSJFArrivalTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSJFArrivalTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSJFArrivalTimeActionPerformed
    public void setForm() {
        crow = tbSJFTT.getSelectedRow();
        tfSJFId.setText(String.valueOf(tbSJFTT.getValueAt(crow, 0)));
        tfSJFTimeRun.setText(String.valueOf(tbSJFTT.getValueAt(crow, 1)));
        if (kieuTT == 1) {
            tfSJFArrivalTime.setText(String.valueOf(tbSJFTT.getValueAt(crow, 1)));
        }
    }

    public void resetForm() {
        tfSJFId.setText("");
        tfSJFTimeRun.setText("");
        tfSJFArrivalTime.setText("");
        tbSJFTT.clearSelection();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSJFKQ;
    private javax.swing.JButton btSJFNhapLai;
    private javax.swing.JButton btSJFSua;
    private javax.swing.JButton btSJFThem;
    private javax.swing.JButton btSJFXoa;
    private javax.swing.JComboBox cbKieuTT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnCatLeft;
    private javax.swing.JPanel pnCatRight;
    private javax.swing.JTextArea taTT;
    private javax.swing.JTable tbSJFKQ;
    private javax.swing.JTable tbSJFTT;
    private javax.swing.JTextField tfAverage;
    private javax.swing.JTextField tfSJFArrivalTime;
    private javax.swing.JTextField tfSJFId;
    private javax.swing.JTextField tfSJFTimeRun;
    private javax.swing.JTextField tfSumTime;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btSJFThem) {

            if ("".equals(tfSJFTimeRun.getText())) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập vào thời gian thực hiện");

            } else if (ckNumber(tfSJFTimeRun.getText()) == 1) {
                if (kieuTT == 0) {
                    ArrayList<ProcSJF> alProc = controller.getListTableTT(tbSJFTT);
                    ProcSJF sjf = new ProcSJF(alProc.size() + 1, Double.parseDouble(tfSJFTimeRun.getText()));
                    alProc.add(sjf);
                    loadTable(alProc, 0, modelTT, tbSJFTT);
                    resetForm();
                } else {
                    if (ckNumber(tfSJFArrivalTime.getText()) == 1) {

                        ArrayList<ProcSJF> alProc = controller.getListTableTTSRT(tbSJFTT);
                        ProcSJF proc = new ProcSJF(alProc.size() + 1, Double.parseDouble(tfSJFTimeRun.getText()));
                        proc.setArrivalTime(Double.parseDouble(tfSJFArrivalTime.getText()));
                        alProc.add(proc);
                        loadTable(alProc, 2, modelTT, tbSJFTT);
                        resetForm();
                    }
                }
            }

        }
//        if (e.getSource() == btSJFSua) {
//            if ("".equals(tfSJFTimeRun.getText()) && "".equals(tfSJFId.getText())) {
//                JOptionPane.showMessageDialog(this, "Vui lòng nhập vào thời gian thực hiện");
//
//            } else {
//                crow = tbSJFTT.getSelectedRow();
//                if (crow < 0) {
//                    JOptionPane.showMessageDialog(this, "Vui lòng chọn để sửa");
//                    return;
//                } else {
//
//                    Proc proc = new Proc(Integer.parseInt(tfSJFId.getText()), Double.parseDouble(tfSJFTimeRun.getText()));
//                    ArrayList<Proc> alProc = controller.editSJFTT(proc, tbSJFTT);
//                    loadTable(alProc, 0, modelTT, tbSJFTT);
//                    tbSJFTT.setRowSelectionInterval(crow, crow);
//                    resetForm();
//                }
//            }
//        }
        if (e.getSource() == btSJFNhapLai) {
            resetForm();
        }
//        if (e.getSource() == btSJFXoa) {
//            if ("".equals(tfSJFTimeRun.getText()) && "".equals(tfSJFId.getText())) {
//                JOptionPane.showMessageDialog(this, "Vui lòng nhập vào thời gian thực hiện");
//
//            } else {
//                crow = tbSJFTT.getSelectedRow();
//                if (crow < 0) {
//                    JOptionPane.showMessageDialog(this, "Vui lòng chọn để sửa");
//                    return;
//                } else {
//
//                    Proc proc = new Proc(Integer.parseInt(tfSJFId.getText()), Double.parseDouble(tfSJFTimeRun.getText()));
//                    ArrayList<Proc> alProc = controller.deleteSJFTT(proc, tbSJFTT);
//                    loadTable(alProc, 0, modelTT, tbSJFTT);
//                    tbSJFTT.setRowSelectionInterval(crow, crow);
//                    resetForm();
//                }
//            }
//        }
        if (e.getSource() == btSJFKQ) {
            int countRows = tbSJFTT.getRowCount();
            System.out.println("ddd:"+kieuTT);
            if (countRows <= 0) {
                JOptionPane.showMessageDialog(this, "Chưa có tiến trình nào");
            } else if (kieuTT == 0) {
                 ArrayList<ProcSJF> alItem=controller.getListTableTT(tbSJFTT);
                ArrayList<ProcSJF> alProc = controller.ketQuaSJF(tbSJFTT,alItem);
                
                loadTable(alProc, 1, modelKQ, tbSJFKQ);
            } else {
                ArrayList<ProcSJF> alItem=controller.getListTableTTSRT(tbSJFTT);
                ArrayList<ProcSJF> alProc = controller.ketQuaSRT(tbSJFTT);
              // loadTable(alProc, 3, modelKQ, tbSJFKQ);
            }
        
    }

}



    public int ckNumber(String num) {
        int ck = 1;
        try {
            Double.parseDouble(num);
        } catch (NumberFormatException ex) {
            ck = 0;
            JOptionPane.showMessageDialog(this, "Vui lòng nhập vào số");

        }
        return ck;
    }

}
